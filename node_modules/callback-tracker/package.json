{
  "name": "callback-tracker",
  "version": "2.0.0",
  "description": "Track your callbacks.",
  "main": "tracker.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "wrappy": "1"
  },
  "devDependencies": {
    "tap": "^0.4.12"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/npm/callback-tracker"
  },
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/npm/callback-tracker/issues"
  },
  "homepage": "https://github.com/npm/callback-tracker",
  "readme": "# callback-tracker\n\nTrack your callbacks.\n\nThis module is designed to help make sure that callback functions are\ncalled before exit, and not before you are done with them.\n\nIf they are called prematurely, then an error will be thrown.\n\nIf they are not called before exit, then the tracking info will be\nreported on stderr for your debugging convenience.\n\nThis module is designed to help debug the `cb() never called!` error\nthat happens in some cases when a bug in npm prevents it from\ncompleting all operations.\n\n## USAGE\n\n```javascript\nvar cbTracker = require('callback-tracker')\n\nfunction someMethodOfMine(args, cb) {\n  // set up the tracking device\n  // cbTracker(cb, tagline)\n  // tagline should ideally be unique to this *call*\n  // but that is not essential.  What's important is to provide\n  // enough details that you'll know wtf it was trying to do.\n  cb = cbTracker('some-method:' + args.join(':'), cb)\n\n  cb.track('start')\n  fs.readFile('some-file', function (er, data) {\n    cb.track('read the file')\n    if (er) return cb(er)\n    doSomethingWithData(data, function (er, res) {\n      cb.track('did stuff with data')\n      cb(er, res)\n    })\n  })\n}\n```\n\nIf the callback is not called before `process.on('exit')`, it'll print\nout a log of how far along it got.\n\nIf any `cb.track()` calls are made *after* the callback, then it'll\nthrow an error and crash immediately.\n\nThe `cb.track()` function takes the same arguments and formats things\nlike `console.log` and the like.\n\n## API\n\n* `trackCb(options, callback)`  Returns a tracked callback.  Tracked\n  callbacks have a `cb.track()` method, and a `cb.key` property.\n* `trackCb.print()` Dump currently in-progress trackers.\n* `trackCb.pretty()` Return a prettified string of the trackers in\n  progress.\n\n## Options\n\nThe second argument to `track-callback` is an options object which can\ncontain the following fields:\n\n* `track` If set to false, then don't track stuff.  This allows\n  conditionally tracking cb's based on an env var or whatever.\n* `key` A key to use to track this callback.  If already in use, then\n  a number will be appended to the end.\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "160114b020959be11904d2961b9cbe8df6aa61d1",
  "_id": "callback-tracker@2.0.0",
  "_shasum": "3a9973d4d209538ca9d2bb23491e051cf7690787",
  "_from": "callback-tracker@latest"
}
